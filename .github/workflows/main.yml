name: Build Static Coccinelle (GLIBC 2.23 Compatible)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Build Static Coccinelle using Docker
      run: |
        echo "Building static Coccinelle for GLIBC 2.23 (Ubuntu 16.04)"

        docker pull ubuntu:16.04

        cat > build_static.sh << 'EOF'
#!/bin/bash
set -e

apt-get update
apt-get install -y \
    build-essential \
    ocaml \
    ocaml-native-compilers \
    ocaml-findlib \
    libnum-ocaml-dev \
    libpcre3-dev \
    libpcre-ocaml-dev \
    pkg-config \
    python3-dev \
    autoconf \
    automake \
    libtool \
    m4 \
    wget \
    curl \
    ca-certificates

cd /tmp

for VERSION in "1.0.7" "1.0.6"; do
  echo "Building Coccinelle \$VERSION"

  rm -rf coccinelle-* || true

  if wget -q https://github.com/coccinelle/coccinelle/archive/refs/tags/\$VERSION.tar.gz; then
    tar -xzf \$VERSION.tar.gz
    cd coccinelle-\$VERSION

    autoreconf -fiv || true

    if ./configure --prefix=/opt/static-spatch --disable-pcre --disable-python --disable-shared; then
      make -j1 || continue

      for spatch_name in spatch spatch.opt spatch.byte; do
        if [ -f "\$spatch_name" ]; then
          cp "\$spatch_name" spatch
          break
        fi
      done

      make install
      echo "\$VERSION" > /tmp/SUCCESS_VERSION
      break
    fi
    cd /tmp
  fi

done

if [ ! -f /tmp/SUCCESS_VERSION ]; then
  echo "All builds failed"
  exit 1
fi

VERSION=$(cat /tmp/SUCCESS_VERSION)
mkdir -p /opt/portable-coccinelle/bin /opt/portable-coccinelle/lib /opt/portable-coccinelle/share
cp /opt/static-spatch/bin/spatch /opt/portable-coccinelle/bin/
chmod +x /opt/portable-coccinelle/bin/spatch

echo "Version: \$VERSION" > /opt/portable-coccinelle/version.txt

echo "#!/bin/bash" > /opt/portable-coccinelle/spatch.sh
echo 'DIR=$(cd "$(dirname "$0")" && pwd)' >> /opt/portable-coccinelle/spatch.sh
echo 'export LD_LIBRARY_PATH="$DIR/lib:\$LD_LIBRARY_PATH"' >> /opt/portable-coccinelle/spatch.sh
echo 'exec "$DIR/bin/spatch" "$@"' >> /opt/portable-coccinelle/spatch.sh
chmod +x /opt/portable-coccinelle/spatch.sh

cd /opt

TARBALL="coccinelle-\$VERSION-static-ubuntu16.tar.gz"
tar -czf \$TARBALL portable-coccinelle
mv \$TARBALL /output/
EOF

        docker run --rm \
          -v $(pwd)/build_static.sh:/build_static.sh \
          -v $(pwd):/output \
          ubuntu:16.04 \
          bash -c "chmod +x /build_static.sh && /build_static.sh"

    - name: Upload Release
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        FILE=$(ls coccinelle-*-static-ubuntu16.tar.gz)
        VERSION=$(echo "$FILE" | sed 's/coccinelle-\(.*\)-static-ubuntu16.tar.gz/\1/')
        TAG="coccinelle-static-\${VERSION}-$(date +%Y%m%d-%H%M)"
        BODY="Static Coccinelle \${VERSION} for Ubuntu 16.04+ (GLIBC 2.23+)."

        echo "Creating GitHub Release for \$FILE"

        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"tag_name":"'"\$TAG"'","name":"'"Coccinelle \$VERSION Static"'","body":"'"\$BODY"'","draft":false,"prerelease":false}' \
          https://api.github.com/repos/${{ github.repository }}/releases)

        echo "RESPONSE: \$RESPONSE"

        UPLOAD_URL=$(echo "\$RESPONSE" | grep upload_url | cut -d '"' -f 4 | sed 's/{?name,label}//')

        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/gzip" \
          --data-binary "@\$FILE" \
          "\$UPLOAD_URL?name=\$FILE"
