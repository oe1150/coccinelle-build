name: Build Static Coccinelle 1.0.7

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Build Static Coccinelle 1.0.7
      run: |
        # Use older Ubuntu for better GLIBC compatibility
        docker pull ubuntu:16.04
        
        cat > build.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Install dependencies
        apt-get update
        apt-get install -y build-essential ocaml ocaml-findlib autoconf automake wget curl
        
        # Download Coccinelle 1.0.7
        cd /tmp
        wget https://github.com/coccinelle/coccinelle/archive/refs/tags/1.0.7.tar.gz
        tar -xzf 1.0.7.tar.gz
        cd coccinelle-1.0.7
        
        # Fix Python binding issue
        echo "Fixing Python binding compilation issue..."
        
        # Create missing Python interface files
        mkdir -p python
        touch python/no_pycocci.mli
        touch python/no_pycocci.ml
        
        # Alternative: modify Makefile to skip Python completely
        if [ -f Makefile.in ]; then
            sed -i 's/python\/no_pycocci\.mli//g' Makefile.in
            sed -i 's/python\/no_pycocci\.cmi//g' Makefile.in
        fi
        
        # Configure and build
        ./autogen
        
        # Try different configuration approaches
        if ./configure --prefix=/opt/coccinelle --disable-pcre --disable-python --disable-opt; then
            echo "Configuration 1 successful"
        elif ./configure --prefix=/opt/coccinelle --disable-python; then
            echo "Configuration 2 successful"  
        elif ./configure --prefix=/opt/coccinelle; then
            echo "Configuration 3 successful"
        else
            echo "All configurations failed"
            exit 1
        fi
        
        # Build with error handling
        if make -j1; then
            echo "Build successful"
        else
            echo "Build failed, trying clean build..."
            make clean
            
            # Try building specific targets to avoid Python issues
            if make spatch; then
                echo "Spatch binary built successfully"
                mkdir -p /opt/coccinelle/bin
                cp spatch /opt/coccinelle/bin/
            else
                echo "Even spatch build failed"
                exit 1
            fi
        fi
        
        # Install if make install works, otherwise manual copy
        if make install 2>/dev/null; then
            echo "Installation successful"
        else
            echo "Manual installation..."
            mkdir -p /opt/coccinelle/bin
            cp spatch /opt/coccinelle/bin/ 2>/dev/null || cp spatch.opt /opt/coccinelle/bin/spatch 2>/dev/null || cp spatch.byte /opt/coccinelle/bin/spatch
        fi
        
        # Test
        /opt/coccinelle/bin/spatch --version
        
        # Package
        cd /opt
        tar -czf coccinelle-1.0.7-static.tar.gz coccinelle/
        EOF
        
        chmod +x build.sh
        
        # Build in container
        docker run --rm -v $(pwd)/build.sh:/build.sh -v $(pwd):/output ubuntu:16.04 bash -c "/build.sh && cp /opt/*.tar.gz /output/"
        
        # Create release
        if ls coccinelle-*.tar.gz; then
          PACKAGE=$(ls coccinelle-*.tar.gz | head -1)
          echo "Package created: $PACKAGE"
          
          # GitHub release
          RELEASE_DATA='{"tag_name":"coccinelle-1.0.7-'$(date +%Y%m%d)'","name":"Coccinelle 1.0.7 Static","body":"Static Coccinelle 1.0.7 for older GLIBC compatibility"}'
          
          RELEASE_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
            -d "$RELEASE_DATA")
          
          HTTP_CODE=$(echo "$RELEASE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          
          if [ "$HTTP_CODE" = "201" ]; then
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//' | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
            
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary "@$PACKAGE" \
              "${UPLOAD_URL}?name=$PACKAGE"
            
            echo "âœ… SUCCESS: Coccinelle 1.0.7 static build complete!"
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
