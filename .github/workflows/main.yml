name: Build Coccinelle 1.0.7+ (No Docker)

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Build Coccinelle 1.0.7+ from source
      run: |
        echo "Building Coccinelle 1.0.7+ with compatibility focus"
        
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ocaml \
          ocaml-native-compilers \
          ocaml-findlib \
          libpcre3-dev \
          pkg-config \
          python3-dev \
          python3-setuptools \
          autoconf \
          automake \
          libtool \
          m4 \
          wget \
          curl \
          tar
        
        echo "OCaml version: $(ocaml -version)"
        echo "Available OCaml packages:"
        ocamlfind list | head -10
        
        cd /tmp
        SUCCESS_VERSION=""
        
        for VERSION in "1.0.8" "1.0.7"; do
            echo "========================================="
            echo "Attempting Coccinelle $VERSION"
            echo "========================================="
            
            rm -rf coccinelle-*
            
            wget https://github.com/coccinelle/coccinelle/archive/refs/tags/$VERSION.tar.gz
            tar -xzf $VERSION.tar.gz
            cd coccinelle-$VERSION
            
            echo "Running autogen..."
            if [ -f autogen ]; then
                ./autogen
            elif [ -f autogen.sh ]; then
                ./autogen.sh
            else
                autoreconf -fiv
            fi
            
            echo "Configuring for GLIBC 2.23 compatibility..."
            if ./configure \
                --prefix=/tmp/coccinelle-install \
                --disable-opt \
                --disable-pcre \
                --enable-python \
                --with-python=python3 \
                CC="gcc -m64" \
                CFLAGS="-O2 -static-libgcc -fno-stack-protector" \
                LDFLAGS="-static-libgcc -Wl,--no-as-needed"; then
                
                echo "Configure successful for $VERSION"
                
                echo "Building..."
                if make -j$(nproc) 2>&1 | tee build.log; then
                    echo "Build successful for $VERSION"
                    
                    if [ -f spatch ]; then
                        echo "Testing spatch..."
                        if ./spatch --version; then
                            echo "spatch test successful"
                            
                            make install
                            
                            SUCCESS_VERSION="$VERSION"
                            echo "Coccinelle $VERSION installed successfully"
                            /tmp/coccinelle-install/bin/spatch --version
                            break
                        else
                            echo "spatch test failed"
                        fi
                    else
                        echo "No spatch executable generated"
                        echo "Build log tail:"
                        tail -20 build.log
                    fi
                else
                    echo "Build failed for $VERSION"
                    echo "Build log tail:"
                    tail -20 build.log
                fi
            else
                echo "Configure failed for $VERSION"
            fi
            
            cd /tmp
        done
        
        if [ -z "$SUCCESS_VERSION" ]; then
            echo "All versions failed to build"
            exit 1
        fi
        
        echo "========================================="
        echo "Creating portable package..."
        echo "========================================="
        
        SPATCH_PATH="/tmp/coccinelle-install/bin/spatch"
        
        cd /tmp
        rm -rf portable-coccinelle
        mkdir -p portable-coccinelle/bin
        mkdir -p portable-coccinelle/lib
        mkdir -p portable-coccinelle/share
        mkdir -p portable-coccinelle/python
        
        cp "$SPATCH_PATH" portable-coccinelle/bin/
        echo "Copied spatch binary"
        
        if [ -d /tmp/coccinelle-install/lib/coccinelle ]; then
            cp -r /tmp/coccinelle-install/lib/coccinelle portable-coccinelle/lib/
            echo "Copied coccinelle libraries"
        fi
        
        if [ -d /tmp/coccinelle-install/share/coccinelle ]; then
            cp -r /tmp/coccinelle-install/share/coccinelle portable-coccinelle/share/
            echo "Copied coccinelle configuration"
        fi
        
        for ocaml_dir in /usr/lib/ocaml /usr/lib/x86_64-linux-gnu/ocaml; do
            if [ -d "$ocaml_dir" ]; then
                cp -r "$ocaml_dir" portable-coccinelle/lib/
                echo "Copied OCaml libraries from $ocaml_dir"
                break
            fi
        done
        
        if [ -d /tmp/coccinelle-install/lib/python* ]; then
            cp -r /tmp/coccinelle-install/lib/python*/site-packages/* portable-coccinelle/python/ 2>/dev/null || true
            echo "Copied Python modules"
        fi
        
        echo '#!/bin/bash' > portable-coccinelle/spatch.sh
        echo 'SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"' >> portable-coccinelle/spatch.sh
        echo '' >> portable-coccinelle/spatch.sh
        echo '# 設置環境變數' >> portable-coccinelle/spatch.sh
        echo 'export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$SCRIPT_DIR/lib/ocaml:$LD_LIBRARY_PATH"' >> portable-coccinelle/spatch.sh
        echo 'export OCAML_TOPLEVEL_PATH="$SCRIPT_DIR/lib/ocaml"' >> portable-coccinelle/spatch.sh
        echo 'export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$SCRIPT_DIR/lib/coccinelle/python:$SCRIPT_DIR/python"' >> portable-coccinelle/spatch.sh
        echo '' >> portable-coccinelle/spatch.sh
        echo '# 執行 spatch' >> portable-coccinelle/spatch.sh
        echo 'exec "$SCRIPT_DIR/bin/spatch" "$@"' >> portable-coccinelle/spatch.sh
        
        chmod +x portable-coccinelle/spatch.sh
        chmod +x portable-coccinelle/bin/spatch
        
        cp portable-coccinelle/spatch.sh portable-coccinelle/spatch
        
        echo '# Portable Coccinelle for Ubuntu 16.04+' > portable-coccinelle/README.md
        echo '' >> portable-coccinelle/README.md
        echo '## Version Information' >> portable-coccinelle/README.md
        echo 'Built from source on Ubuntu 22.04 with GLIBC 2.23+ compatibility' >> portable-coccinelle/README.md
        echo '' >> portable-coccinelle/README.md
        echo '## Usage' >> portable-coccinelle/README.md
        echo '```bash' >> portable-coccinelle/README.md
        echo './spatch.sh --version' >> portable-coccinelle/README.md
        echo './spatch --version' >> portable-coccinelle/README.md
        echo '```' >> portable-coccinelle/README.md
        echo '' >> portable-coccinelle/README.md
        echo '## Installation' >> portable-coccinelle/README.md
        echo '```bash' >> portable-coccinelle/README.md
        echo 'tar -xzf coccinelle-portable.tar.gz' >> portable-coccinelle/README.md
        echo 'cd portable-coccinelle' >> portable-coccinelle/README.md
        echo './spatch --version' >> portable-coccinelle/README.md
        echo '```' >> portable-coccinelle/README.md
        echo '' >> portable-coccinelle/README.md
        echo '## Compatibility' >> portable-coccinelle/README.md
        echo '- Target: Ubuntu 16.04+ (GLIBC 2.23+)' >> portable-coccinelle/README.md
        echo '- Python 3 support' >> portable-coccinelle/README.md
        echo '- OCaml runtime included' >> portable-coccinelle/README.md
        echo '- Static-linked where possible' >> portable-coccinelle/README.md
        
        echo "Testing portable version..."
        ./portable-coccinelle/spatch.sh --version
        
        echo "Binary dependencies:"
        ldd portable-coccinelle/bin/spatch | head -10
        
        PACKAGE_FILE="coccinelle-${SUCCESS_VERSION}-portable.tar.gz"
        tar -czf "$PACKAGE_FILE" portable-coccinelle/
        
        echo "Package created: $PACKAGE_FILE"
        echo "Package size: $(du -h $PACKAGE_FILE | cut -f1)"
        
        mv "$PACKAGE_FILE" /home/runner/work/coccinelle-build/coccinelle-build/
        
        echo "========================================="
        echo "Creating GitHub Release..."
        echo "========================================="
        
        cd /home/runner/work/coccinelle-build/coccinelle-build/
        
        RELEASE_TAG="coccinelle-${SUCCESS_VERSION}-$(date +%Y%m%d-%H%M%S)"
        RELEASE_NAME="Coccinelle ${SUCCESS_VERSION} (Source Build)"
        
        echo '{' > payload.json
        echo '  "tag_name": "'"$RELEASE_TAG"'",' >> payload.json
        echo '  "target_commitish": "main",' >> payload.json
        echo '  "name": "'"$RELEASE_NAME"'",' >> payload.json
        echo '  "body": "Coccinelle '"$SUCCESS_VERSION"' built from source with GLIBC 2.23+ compatibility",' >> payload.json
        echo '  "draft": false,' >> payload.json
        echo '  "prerelease": false' >> payload.json
        echo '}' >> payload.json
        
        RELEASE_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
          -d @payload.json)
        
        HTTP_CODE=$(echo "$RELEASE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RELEASE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        if [ "$HTTP_CODE" = "201" ]; then
            UPLOAD_URL=$(echo "$RESPONSE_BODY" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
            RELEASE_HTML_URL=$(echo "$RESPONSE_BODY" | grep -o '"html_url": "[^"]*' | cut -d'"' -f4)
            
            echo "Release created: $RELEASE_HTML_URL"
            echo "Uploading package..."
            
            UPLOAD_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary "@$PACKAGE_FILE" \
              "${UPLOAD_URL}?name=$PACKAGE_FILE")
            
            UPLOAD_HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            
            if [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                echo "========================================="
                echo "SUCCESS! Coccinelle $SUCCESS_VERSION"
                echo "========================================="
                echo "Release: $RELEASE_HTML_URL"
                echo "Package: $PACKAGE_FILE"  
                echo "Version: $(/tmp/coccinelle-install/bin/spatch --version | head -1)"
                echo "========================================="
            else
                echo "Upload failed (HTTP $UPLOAD_HTTP_CODE)"
            fi
        else
            echo "Release creation failed (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
