name: Build Coccinelle 1.0.7+ (GLIBC 2.23 Compatible)

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Build Coccinelle 1.0.7+ with GLIBC 2.23 compatibility
      run: |
        echo "Building Coccinelle 1.0.7+ for GLIBC 2.23"
        
        apt-get update -qq
        apt-get install -y -qq build-essential wget curl tar ca-certificates docker.io
        
        service docker start
        
        echo "Creating Dockerfile..."
        cat > Dockerfile << 'EOF_DOCKERFILE'
        FROM ubuntu:16.04
        
        RUN apt-get update && apt-get install -y \
            build-essential \
            ocaml \
            ocaml-native-compilers \
            ocaml-findlib \
            libpcre3-dev \
            pkg-config \
            python3-dev \
            python3-setuptools \
            wget \
            curl \
            tar \
            ca-certificates \
            autoconf \
            automake \
            libtool \
            m4 \
            git
        
        WORKDIR /build
        
        COPY build_script.sh /build/
        RUN chmod +x /build/build_script.sh
        RUN ./build_script.sh
        
        COPY package_script.sh /build/
        RUN chmod +x /build/package_script.sh
        RUN ./package_script.sh
        EOF_DOCKERFILE
        
        echo "Creating build script..."
        cat > build_script.sh << 'EOF_BUILD'
        #!/bin/bash
        set -e
        
        echo "Building Coccinelle 1.0.7+ from source..."
        
        for VERSION in "1.0.8" "1.0.7"; do
            echo "Attempting Coccinelle $VERSION"
            
            cd /build
            rm -rf coccinelle-*
            
            wget https://github.com/coccinelle/coccinelle/archive/refs/tags/$VERSION.tar.gz
            tar -xzf $VERSION.tar.gz
            cd coccinelle-$VERSION
            
            echo "OCaml version: $(ocaml -version)"
            
            if [ -f autogen ]; then
                ./autogen
            elif [ -f autogen.sh ]; then
                ./autogen.sh
            else
                autoreconf -fiv
            fi
            
            if ./configure --prefix=/usr/local --disable-opt --disable-pcre --enable-python --with-python=python3; then
                echo "Configure successful for $VERSION"
                
                if make -j$(nproc); then
                    echo "Build successful for $VERSION"
                    
                    if [ -f spatch ]; then
                        echo "Testing spatch..."
                        ./spatch --version
                        
                        make install
                        
                        echo "Coccinelle $VERSION installed successfully"
                        /usr/local/bin/spatch --version
                        
                        echo "$VERSION" > /build/SUCCESS_VERSION
                        break
                    else
                        echo "No spatch executable generated for $VERSION"
                    fi
                else
                    echo "Build failed for $VERSION"
                fi
            else
                echo "Configure failed for $VERSION"
            fi
        done
        
        if [ ! -f /build/SUCCESS_VERSION ]; then
            echo "All versions failed to build"
            exit 1
        fi
        
        echo "Successfully built Coccinelle $(cat /build/SUCCESS_VERSION)"
        EOF_BUILD
        
        echo "Creating package script..."
        cat > package_script.sh << 'EOF_PACKAGE'
        #!/bin/bash
        set -e
        
        echo "Creating portable package..."
        
        SUCCESS_VERSION=$(cat /build/SUCCESS_VERSION)
        SPATCH_PATH="/usr/local/bin/spatch"
        
        echo "Installed version: $($SPATCH_PATH --version | head -1)"
        
        cd /build
        rm -rf portable-coccinelle
        mkdir -p portable-coccinelle/bin
        mkdir -p portable-coccinelle/lib
        mkdir -p portable-coccinelle/share
        mkdir -p portable-coccinelle/python
        
        cp "$SPATCH_PATH" portable-coccinelle/bin/
        
        if [ -d /usr/local/lib/coccinelle ]; then
            cp -r /usr/local/lib/coccinelle portable-coccinelle/lib/
            echo "Copied coccinelle libraries"
        fi
        
        if [ -d /usr/local/share/coccinelle ]; then
            cp -r /usr/local/share/coccinelle portable-coccinelle/share/
            echo "Copied coccinelle configuration"
        fi
        
        for ocaml_dir in /usr/lib/ocaml /usr/lib/x86_64-linux-gnu/ocaml; do
            if [ -d "$ocaml_dir" ]; then
                cp -r "$ocaml_dir" portable-coccinelle/lib/
                echo "Copied OCaml libraries from $ocaml_dir"
                break
            fi
        done
        
        if [ -d /usr/local/lib/python*/site-packages ]; then
            cp -r /usr/local/lib/python*/site-packages/coccinelle portable-coccinelle/python/ 2>/dev/null || true
            echo "Copied Python modules"
        fi
        
        cat > portable-coccinelle/spatch.sh << 'EOF_LAUNCHER'
        #!/bin/bash
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
        
        export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$SCRIPT_DIR/lib/ocaml:$LD_LIBRARY_PATH"
        export OCAML_TOPLEVEL_PATH="$SCRIPT_DIR/lib/ocaml"
        export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$SCRIPT_DIR/lib/coccinelle/python:$SCRIPT_DIR/python"
        
        exec "$SCRIPT_DIR/bin/spatch" "$@"
        EOF_LAUNCHER
        
        chmod +x portable-coccinelle/spatch.sh
        chmod +x portable-coccinelle/bin/spatch
        
        cp portable-coccinelle/spatch.sh portable-coccinelle/spatch
        
        echo "Testing portable version..."
        ./portable-coccinelle/spatch.sh --version
        
        echo "Binary dependencies:"
        ldd portable-coccinelle/bin/spatch | head -10
        
        tar -czf "coccinelle-${SUCCESS_VERSION}-portable.tar.gz" portable-coccinelle/
        
        echo "Package created: coccinelle-${SUCCESS_VERSION}-portable.tar.gz"
        echo "Package size: $(du -h coccinelle-${SUCCESS_VERSION}-portable.tar.gz | cut -f1)"
        EOF_PACKAGE
        
        echo "Building Docker image..."
        docker build -t coccinelle-builder .
        
        echo "Running build in Docker..."
        docker run --name coccinelle-build coccinelle-builder
        
        echo "Copying build results..."
        docker cp coccinelle-build:/build/coccinelle-*-portable.tar.gz ./
        docker cp coccinelle-build:/build/SUCCESS_VERSION ./
        
        if [ -f "SUCCESS_VERSION" ]; then
            SUCCESS_VERSION=$(cat SUCCESS_VERSION)
            PACKAGE_FILE="coccinelle-${SUCCESS_VERSION}-portable.tar.gz"
            
            if [ -f "$PACKAGE_FILE" ]; then
                echo "Build successful!"
                echo "Version: $SUCCESS_VERSION"
                echo "Package: $PACKAGE_FILE"
                echo "Size: $(du -h $PACKAGE_FILE | cut -f1)"
                
                echo "Creating GitHub Release..."
                
                RELEASE_TAG="coccinelle-${SUCCESS_VERSION}-$(date +%Y%m%d-%H%M%S)"
                RELEASE_NAME="Coccinelle ${SUCCESS_VERSION} (GLIBC 2.23 Compatible)"
                
                echo "{" > payload.json
                echo "  \"tag_name\": \"$RELEASE_TAG\"," >> payload.json
                echo "  \"target_commitish\": \"main\"," >> payload.json  
                echo "  \"name\": \"$RELEASE_NAME\"," >> payload.json
                echo "  \"body\": \"Coccinelle $SUCCESS_VERSION Portable Package for Ubuntu 16.04+ (GLIBC 2.23+)\"," >> payload.json
                echo "  \"draft\": false," >> payload.json
                echo "  \"prerelease\": false" >> payload.json
                echo "}" >> payload.json
                
                RELEASE_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
                  -d @payload.json)
                
                HTTP_CODE=$(echo "$RELEASE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                RESPONSE_BODY=$(echo "$RELEASE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
                
                if [ "$HTTP_CODE" = "201" ]; then
                    UPLOAD_URL=$(echo "$RESPONSE_BODY" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
                    RELEASE_HTML_URL=$(echo "$RESPONSE_BODY" | grep -o '"html_url": "[^"]*' | cut -d'"' -f4)
                    
                    echo "Uploading package..."
                    UPLOAD_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: application/gzip" \
                      --data-binary "@$PACKAGE_FILE" \
                      "${UPLOAD_URL}?name=$PACKAGE_FILE")
                    
                    UPLOAD_HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                    
                    if [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                        echo "SUCCESS! Coccinelle $SUCCESS_VERSION"
                        echo "Release: $RELEASE_HTML_URL"
                        echo "Package: $PACKAGE_FILE"
                        echo "Compatible with: Ubuntu 16.04+ (GLIBC 2.23+)"
                    else
                        echo "Upload failed"
                    fi
                else
                    echo "Release creation failed"
                fi
            else
                echo "Package file not found"
                exit 1
            fi
        else
            echo "Build failed - no success version"
            exit 1
        fi
        
        docker rm coccinelle-build || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
