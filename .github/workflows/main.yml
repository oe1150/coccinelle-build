name: Build Static Coccinelle 1.0.7+ (GLIBC 2.23 Compatible)

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Build Static Coccinelle in Ubuntu 16.04
      run: |
        echo "Building static Coccinelle for maximum compatibility"
        
        # 使用 Ubuntu 16.04 基礎鏡像
        docker pull ubuntu:16.04
        
        # 創建構建腳本
        cat > build_static.sh << 'EOF'
#!/bin/bash
set -e

echo "=== Building Static Coccinelle in Ubuntu 16.04 ==="
echo "GLIBC version: $(ldd --version | head -1)"

# 更新並安裝依賴
apt-get update
apt-get install -y \
    build-essential \
    ocaml \
    ocaml-native-compilers \
    ocaml-findlib \
    libnum-ocaml-dev \
    libpcre3-dev \
    libpcre-ocaml-dev \
    pkg-config \
    python3-dev \
    autoconf \
    automake \
    libtool \
    m4 \
    wget \
    curl \
    ca-certificates \
    musl-dev \
    musl-tools

echo "OCaml version: $(ocaml -version)"

cd /tmp

# 編譯靜態版本的 Coccinelle 1.0.7
for VERSION in "1.0.7" "1.0.6"; do
    echo "========================================="
    echo "Attempting static build of Coccinelle $VERSION"
    echo "========================================="
    
    rm -rf coccinelle-*
    
    if wget -q https://github.com/coccinelle/coccinelle/archive/refs/tags/$VERSION.tar.gz; then
        tar -xzf $VERSION.tar.gz
        cd coccinelle-$VERSION
        
        echo "Generating configure script..."
        if [ -f autogen ]; then
            ./autogen
        else
            autoreconf -fiv
        fi
        
        echo "Configuring for static build..."
        # 嘗試靜態編譯配置
        if ./configure \
            --prefix=/opt/static-spatch \
            --disable-opt \
            --disable-pcre \
            --disable-python \
            --disable-shared \
            --enable-static \
            CC="gcc -static" \
            LDFLAGS="-static" \
            OCAMLC_OPT="-ccopt -static" \
            OCAMLOPT_OPT="-ccopt -static"; then
            
            echo "✅ Static configuration successful"
            
            echo "Building static version..."
            if make -j1 LDFLAGS="-static"; then
                echo "✅ Static build successful!"
                
                # 檢查是否真的是靜態編譯
                SPATCH_FOUND=""
                for spatch_name in "spatch" "spatch.opt" "spatch.byte"; do
                    if [ -f "$spatch_name" ]; then
                        SPATCH_FOUND="$spatch_name"
                        echo "Found: $spatch_name"
                        file "$spatch_name"
                        ldd "$spatch_name" 2>&1 || echo "Static binary (no dynamic dependencies)"
                        break
                    fi
                done
                
                if [ -n "$SPATCH_FOUND" ]; then
                    echo "Testing static spatch..."
                    if ./"$SPATCH_FOUND" --version; then
                        echo "✅ Static spatch works!"
                        
                        # 安裝
                        if [ "$SPATCH_FOUND" != "spatch" ]; then
                            cp "$SPATCH_FOUND" spatch
                        fi
                        
                        make install
                        echo "$VERSION" > /tmp/SUCCESS_VERSION
                        echo "✅ Static Coccinelle $VERSION installed!"
                        break
                    fi
                fi
            fi
        fi
        
        # 如果靜態編譯失敗，嘗試普通編譯但在 Ubuntu 16.04 中
        echo "Static build failed, trying regular build in Ubuntu 16.04..."
        make distclean 2>/dev/null || true
        
        if ./configure --prefix=/opt/static-spatch --disable-opt --disable-pcre; then
            if make -j1; then
                SPATCH_FOUND=""
                for spatch_name in "spatch" "spatch.opt" "spatch.byte"; do
                    if [ -f "$spatch_name" ]; then
                        SPATCH_FOUND="$spatch_name"
                        break
                    fi
                done
                
                if [ -n "$SPATCH_FOUND" ] && ./"$SPATCH_FOUND" --version; then
                    if [ "$SPATCH_FOUND" != "spatch" ]; then
                        cp "$SPATCH_FOUND" spatch
                    fi
                    make install
                    echo "$VERSION" > /tmp/SUCCESS_VERSION
                    echo "✅ Regular build successful in Ubuntu 16.04!"
                    break
                fi
            fi
        fi
        
        cd /tmp
    fi
done

if [ ! -f /tmp/SUCCESS_VERSION ]; then
    echo "❌ All builds failed"
    exit 1
fi

SUCCESS_VERSION=$(cat /tmp/SUCCESS_VERSION)
echo "✅ Successfully built Coccinelle $SUCCESS_VERSION"

# 檢查最終二進制
echo "Final binary info:"
/opt/static-spatch/bin/spatch --version
echo "Dependencies:"
ldd /opt/static-spatch/bin/spatch 2>&1 || echo "Static binary"

# 創建可攜式包
cd /opt
rm -rf portable-coccinelle
mkdir -p portable-coccinelle/bin
mkdir -p portable-coccinelle/lib
mkdir -p portable-coccinelle/share

# 複製 spatch 二進制
cp static-spatch/bin/spatch portable-coccinelle/bin/
chmod +x portable-coccinelle/bin/spatch

# 複製庫文件（如果需要）
if [ -d static-spatch/lib/coccinelle ]; then
    cp -r static-spatch/lib/coccinelle portable-coccinelle/lib/
fi

if [ -d static-spatch/share/coccinelle ]; then
    cp -r static-spatch/share/coccinelle portable-coccinelle/share/
fi

# 複製基礎 OCaml 庫（防萬一）
for ocaml_dir in /usr/lib/ocaml /usr/lib/x86_64-linux-gnu/ocaml; do
    if [ -d "$ocaml_dir" ]; then
        cp -r "$ocaml_dir" portable-coccinelle/lib/
        break
    fi
done

# 創建啟動腳本
cat > portable-coccinelle/spatch.sh << 'LAUNCHER'
#!/bin/bash
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# 設置環境變數（防萬一）
export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$SCRIPT_DIR/lib/ocaml:$LD_LIBRARY_PATH"
export OCAML_TOPLEVEL_PATH="$SCRIPT_DIR/lib/ocaml"

# 執行 spatch
exec "$SCRIPT_DIR/bin/spatch" "$@"
LAUNCHER

chmod +x portable-coccinelle/spatch.sh

# 創建軟連結
cd portable-coccinelle
ln -sf spatch.sh spatch
cd /opt

# 創建 README
FINAL_VERSION=$(/opt/static-spatch/bin/spatch --version | head -1)
cat > portable-coccinelle/README.md << README
# Static Coccinelle for Ubuntu 16.04+ (GLIBC 2.23 Compatible)

## Version Information
$FINAL_VERSION
Built statically on Ubuntu 16.04 for maximum compatibility

## Features
- Static compilation for minimal dependencies
- Compatible with GLIBC 2.23+ (Ubuntu 16.04+)
- Support for gentree.py (if version 1.0.7+)

## Usage
\`\`\`bash
./spatch.sh --version
./spatch --version
\`\`\`

## Binary Info
Built version: $SUCCESS_VERSION
Static: $(ldd /opt/static-spatch/bin/spatch 2>&1 | head -1)
README

# 測試
echo "Testing final package..."
./portable-coccinelle/spatch.sh --version

# 打包
tar -czf "coccinelle-${SUCCESS_VERSION}-static-ubuntu16.tar.gz" portable-coccinelle/
echo "✅ Static package created!"
ls -la *.tar.gz
EOF
        
        # 在 Ubuntu 16.04 容器中運行構建
        echo "Running build in Ubuntu 16.04 container..."
        docker run --rm \
            -v $(pwd)/build_static.sh:/build_static.sh \
            -v $(pwd):/output \
            ubuntu:16.04 \
            bash -c "chmod +x /build_static.sh && /build_static.sh && cp /opt/*.tar.gz /output/"
        
        # 檢查結果
        if ls coccinelle-*-static-ubuntu16.tar.gz 1> /dev/null 2>&1; then
            PACKAGE_FILE=$(ls coccinelle-*-static-ubuntu16.tar.gz | head -1)
            echo "✅ Static build successful!"
            echo "Package: $PACKAGE_FILE"
            echo "Size: $(du -h $PACKAGE_FILE | cut -f1)"
            
            # 提取版本信息
            VERSION=$(echo "$PACKAGE_FILE" | sed 's/coccinelle-\(.*\)-static-ubuntu16.tar.gz/\1/')
            
            echo "Creating GitHub Release..."
            RELEASE_TAG="coccinelle-static-${VERSION}-$(date +%Y%m%d-%H%M%S)"
            RELEASE_NAME="Coccinelle ${VERSION} Static (Ubuntu 16.04 Compatible)"
            
            echo '{' > payload.json
            echo '  "tag_name": "'"$RELEASE_TAG"'",' >> payload.json
            echo '  "target_commitish": "main",' >> payload.json
            echo '  "name": "'"$RELEASE_NAME"'",' >> payload.json
            echo '  "body": "Static Coccinelle '"$VERSION"' for Ubuntu 16.04+ (GLIBC 2.23+). Minimal dependencies for maximum compatibility.",' >> payload.json
            echo '  "draft": false,' >> payload.json
            echo '  "prerelease": false' >> payload.json
            echo '}' >> payload.json
            
            RELEASE_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
              -d @payload.json)
            
            HTTP_CODE=$(echo "$RELEASE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$RELEASE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
            
            if [ "$HTTP_CODE" = "201" ]; then
                UPLOAD_URL=$(echo "$RESPONSE_BODY" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
                RELEASE_HTML_URL=$(echo "$RESPONSE_BODY" | grep -o '"html_url": "[^"]*' | cut -d'"' -f4)
                
                echo "✅ Release created: $RELEASE_HTML_URL"
                
                UPLOAD_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/gzip" \
                  --data-binary "@$PACKAGE_FILE" \
                  "${UPLOAD_URL}?name=$PACKAGE_FILE")
                
                UPLOAD_HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                
                if [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                    echo "========================================="
                    echo "🎉 SUCCESS! Static Coccinelle"
                    echo "========================================="
                    echo "Release: $RELEASE_HTML_URL"
                    echo "Package: $PACKAGE_FILE"
                    echo "Version: Coccinelle $VERSION"
                    echo "Type: Static compilation"
                    echo "Target: Ubuntu 16.04+ (GLIBC 2.23+)"
                    echo "========================================="
                else
                    echo "❌ Upload failed"
                fi
            else
                echo "❌ Release creation failed"
            fi
        else
            echo "❌ No package file found"
            exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
