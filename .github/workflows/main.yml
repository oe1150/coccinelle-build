name: Build and Release Coccinelle (Pre-compiled)

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-22.04
    container: ubuntu:16.04
    
    steps:
    - name: Download and Create Release
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        apt-get install -y -qq tar curl ca-certificates wget
        
        echo "Downloading pre-compiled Coccinelle 1.0.7+..."
        echo "Target system GLIBC: 2.23 (Ubuntu 16.04 compatible)"
        
        cd /tmp
        SPATCH_PATH=""
        BUILT_VERSION=""
        
        echo "========================================="
        echo "Downloading pre-compiled packages..."
        echo "========================================="
        
        # 嘗試不同版本的預編譯包
        for version in "1.0.8" "1.0.7" "1.0.6"; do
            echo "Trying to download Coccinelle $version..."
            
            # 嘗試多個可能的 URL
            for url in \
                "http://archive.ubuntu.com/ubuntu/pool/universe/c/coccinelle/coccinelle_${version}-1_amd64.deb" \
                "http://archive.ubuntu.com/ubuntu/pool/universe/c/coccinelle/coccinelle_${version}-2_amd64.deb" \
                "http://archive.ubuntu.com/ubuntu/pool/universe/c/coccinelle/coccinelle_${version}-1ubuntu1_amd64.deb" \
                ; do
                
                echo "  Trying: $url"
                if wget -q --timeout=10 "$url"; then
                    deb_file=$(basename "$url")
                    echo "  Downloaded $deb_file"
                    
                    # 解壓 deb 包
                    dpkg -x "$deb_file" /tmp/extracted
                    
                    if [ -f "/tmp/extracted/usr/bin/spatch" ]; then
                        echo "  Found spatch binary"
                        
                        # 測試兼容性
                        cp /tmp/extracted/usr/bin/spatch /tmp/test_spatch
                        chmod +x /tmp/test_spatch
                        
                        if /tmp/test_spatch --version 2>/dev/null; then
                            echo "  spatch works! Version:"
                            /tmp/test_spatch --version | head -1
                            
                            # 安裝
                            cp /tmp/extracted/usr/bin/spatch /usr/local/bin/
                            cp -r /tmp/extracted/usr/lib/coccinelle /usr/local/lib/ 2>/dev/null || true
                            cp -r /tmp/extracted/usr/share/coccinelle /usr/local/share/ 2>/dev/null || true
                            
                            SPATCH_PATH="/usr/local/bin/spatch"
                            BUILT_VERSION="precompiled-$version"
                            break 2
                        else
                            echo "  spatch not compatible"
                        fi
                    fi
                    
                    rm -f "$deb_file"
                    rm -rf /tmp/extracted
                fi
            done
        done
        
        # 如果沒有找到兼容版本，使用系統包
        if [ -z "$SPATCH_PATH" ]; then
            echo "Using system package..."
            apt-get install -y -qq coccinelle
            SPATCH_PATH="/usr/bin/spatch"
            BUILT_VERSION="system-package"
        fi
        
        # 檢查結果
        echo "========================================="
        echo "RESULT:"
        echo "========================================="
        if [ -x "$SPATCH_PATH" ]; then
            echo "Success! spatch installed at: $SPATCH_PATH"
            $SPATCH_PATH --version
            echo "Method: $BUILT_VERSION"
        else
            echo "Failed to install spatch"
            exit 1
        fi
        
        # 創建可攜式包
        echo "Creating portable package..."
        cd /
        rm -rf portable-coccinelle
        mkdir -p portable-coccinelle/bin
        mkdir -p portable-coccinelle/lib
        mkdir -p portable-coccinelle/share
        
        # 複製文件
        cp "$SPATCH_PATH" portable-coccinelle/bin/
        
        # 複製庫文件
        for lib_dir in /usr/local/lib/coccinelle /usr/lib/coccinelle; do
            if [ -d "$lib_dir" ]; then
                cp -r "$lib_dir" portable-coccinelle/lib/
                break
            fi
        done
        
        # 複製配置文件
        for share_dir in /usr/local/share/coccinelle /usr/share/coccinelle; do
            if [ -d "$share_dir" ]; then
                cp -r "$share_dir" portable-coccinelle/share/
                break
            fi
        done
        
        # 複製 OCaml 庫
        for ocaml_dir in /usr/lib/ocaml /usr/lib/x86_64-linux-gnu/ocaml; do
            if [ -d "$ocaml_dir" ]; then
                mkdir -p portable-coccinelle/lib/ocaml
                cp -r "$ocaml_dir"/* portable-coccinelle/lib/ocaml/ 2>/dev/null || true
                break
            fi
        done
        
        # 創建啟動腳本
        echo '#!/bin/bash' > portable-coccinelle/spatch.sh
        echo 'SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"' >> portable-coccinelle/spatch.sh
        echo 'export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$SCRIPT_DIR/lib/ocaml:$LD_LIBRARY_PATH"' >> portable-coccinelle/spatch.sh
        echo 'export OCAML_TOPLEVEL_PATH="$SCRIPT_DIR/lib/ocaml"' >> portable-coccinelle/spatch.sh
        echo '"$SCRIPT_DIR/bin/spatch" "$@"' >> portable-coccinelle/spatch.sh
        
        chmod +x portable-coccinelle/spatch.sh
        chmod +x portable-coccinelle/bin/spatch
        
        # 創建軟連結
        cd portable-coccinelle
        ln -sf spatch.sh spatch
        cd /
        
        # 創建 README
        FINAL_VERSION=$($SPATCH_PATH --version 2>/dev/null | head -1 || echo "Unknown")
        echo "# Portable Coccinelle (Pre-compiled)" > portable-coccinelle/README.md
        echo "" >> portable-coccinelle/README.md
        echo "Version: $FINAL_VERSION" >> portable-coccinelle/README.md
        echo "Method: $BUILT_VERSION" >> portable-coccinelle/README.md
        echo "Target: GLIBC 2.23+ (Ubuntu 16.04+)" >> portable-coccinelle/README.md
        echo "" >> portable-coccinelle/README.md
        echo "## Usage" >> portable-coccinelle/README.md
        echo "./spatch.sh --version" >> portable-coccinelle/README.md
        echo "./spatch --version" >> portable-coccinelle/README.md
        
        # 測試
        echo "Testing portable version..."
        ./portable-coccinelle/spatch.sh --version || echo "Test failed but package created"
        
        # 打包
        tar -czf coccinelle-precompiled.tar.gz portable-coccinelle/
        echo "Package created: coccinelle-precompiled.tar.gz"
        echo "Package size: $(du -h coccinelle-precompiled.tar.gz | cut -f1)"
        echo "Final version: $FINAL_VERSION"
        
        # 檢查文件確實存在
        if [ -f "coccinelle-precompiled.tar.gz" ]; then
            echo "✅ Package file exists!"
            ls -la coccinelle-precompiled.tar.gz
        else
            echo "❌ Package file missing!"
            exit 1
        fi
        
        # 立即創建 Release
        echo "========================================="
        echo "Creating GitHub Release..."
        echo "========================================="
        
        RELEASE_TAG="coccinelle-precompiled-$(date +%Y%m%d-%H%M%S)"
        RELEASE_NAME="Coccinelle Pre-compiled $(date +%Y-%m-%d)"
        
        echo "Creating release: $RELEASE_TAG"
        
        echo "{" > payload.json
        echo "  \"tag_name\": \"$RELEASE_TAG\"," >> payload.json
        echo "  \"target_commitish\": \"main\"," >> payload.json
        echo "  \"name\": \"$RELEASE_NAME\"," >> payload.json
        echo "  \"body\": \"Pre-compiled Coccinelle package for Ubuntu 16.04+ (GLIBC 2.23+). Version: $FINAL_VERSION\"," >> payload.json
        echo "  \"draft\": false," >> payload.json
        echo "  \"prerelease\": false" >> payload.json
        echo "}" >> payload.json
        
        RELEASE_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
          -d @payload.json)
        
        HTTP_CODE=$(echo "$RELEASE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RELEASE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        if [ "$HTTP_CODE" = "201" ]; then
          UPLOAD_URL=$(echo "$RESPONSE_BODY" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
          RELEASE_HTML_URL=$(echo "$RESPONSE_BODY" | grep -o '"html_url": "[^"]*' | cut -d'"' -f4)
          
          echo "Release created successfully!"
          echo "Upload URL: $UPLOAD_URL"
          echo "Release URL: $RELEASE_HTML_URL"
          
          # 再次檢查文件
          if [ -f "coccinelle-precompiled.tar.gz" ]; then
            echo "File exists, size: $(du -h coccinelle-precompiled.tar.gz | cut -f1)"
            
            echo "Uploading file..."
            UPLOAD_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary @coccinelle-precompiled.tar.gz \
              "${UPLOAD_URL}?name=coccinelle-precompiled.tar.gz")
            
            UPLOAD_HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            UPLOAD_BODY=$(echo "$UPLOAD_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
            
            echo "Upload HTTP code: $UPLOAD_HTTP_CODE"
            
            if [ "$UPLOAD_HTTP_CODE" = "201" ]; then
              echo "✅ File uploaded successfully!"
              DOWNLOAD_URL=$(echo "$UPLOAD_BODY" | grep -o '"browser_download_url": "[^"]*' | cut -d'"' -f4)
              echo "Download URL: $DOWNLOAD_URL"
            else
              echo "❌ File upload failed"
              echo "Upload response: $UPLOAD_BODY"
            fi
          else
            echo "❌ File coccinelle-precompiled.tar.gz not found!"
            echo "Available files:"
            ls -la *.tar.gz || echo "No tar.gz files found"
          fi
          
          echo "========================================="
          echo "SUCCESS!"
          echo "========================================="
          echo "Release Page: $RELEASE_HTML_URL"
          echo "Tag: $RELEASE_TAG"
          echo "========================================="
        else
          echo "Failed to create release (HTTP $HTTP_CODE)"
          echo "Response: $RESPONSE_BODY"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
